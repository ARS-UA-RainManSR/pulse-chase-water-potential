model{
  for(i in 1:N) {
    # Likelihood
    Y[i] ~ dnorm(mu[i], tau)
    # Replicated
    Y.rep[i] ~ dnorm(mu[i], tau)
    # Squared differences
    sqdiff[i] <- pow(Y[i] - Y.rep[i], 2)
    # Residuals
    resid[i] <- mu[i] - Y[i]
    
    # Mean model: Ricker model
    mu[i] <- y.peak[plot[i], variable[i], period[i]]*TimePart[i]
    TimePart[i] <- exp(LogPart[i])
    
    # For multiplicative models, we can often avoid numerical overflow      
    # errors by modeling appropriate parts on the additive log scale,       
    # then exponentiating to get the predicted (e.g, mean) value
    
    LogPart[i] <- 1-(t[i]/t.peak[plot[i], variable[i], period[i]]) + log(t[i]) - Lt.peak[plot[i], variable[i], period[i]]
  }
  
  # Hierarchical priors for plot-level params
  for(p in 1:Nplot) { # Number of plots
    for(j in 1:2) { # variable: 1 = wp, 2 = rwc
      for(k in 1:2) { # period: 1 = predawn, 2 = midday
        # Since the time at which the peak occurs should be after the pulse
        # t.peak > 0
        # give hierarchical prior on log scale
        # centered on treatment -level parameters
        # Truncate t.peak at upper value of max number of days (20)
        # Which means we truncate Lt.peak at log(20)

        Lt.peak[p,j,k] ~ dnorm(mu.Lt.peak[trt[p],j,k], tau.Lt.peak)T(0,log(20))
        t.peak[p,j,k] <- exp(Lt.peak[p,j,k])
    
        # y.peak can be positive (increase in response after pulse)
        # or negative (e.g., decrease in response after pulse)
        # model on original scale:
    
        y.peak[p,j,k] ~ dnorm(mu.y.peak[trt[p],j,k], tau.y.peak)
      }
    }
  }


  # Independent priors for treatment-level parameters (root nodes)
  # Truncate the treatment-level t.peak
  for(t in 1:Ntrt){ # Number of treatments
    for(j in 1:2) { # variable: 1 = wp, 2 = rwc
      for(k in 1:2) { # period: 1 = predawn, 2 = midday
      
        mu.Lt.peak[t,j,k] ~ dnorm(0, 0.0001)T(0,log(20)) 
    
        # back-transform to get treatment-level t.peak:
        mu.t.peak[t,j,k] <- exp(mu.Lt.peak[t,j,k])
        mu.y.peak[t,j,k] ~ dnorm(0, 0.0001)
      }
    }
  }

  # Priors for scalar parameters (precisions, standard deviations):
  sig.Lt.peak ~ dunif(0,100)
  sig.y.peak ~ dunif(0,100)
  tau.Lt.peak <- pow(sig.Lt.peak,-2)
  tau.y.peak <- pow(sig.y.peak,-2)

  # Prior for observation precision
  tau ~ dgamma(0.01, 0.01)
  sig <- pow(tau, -0.5)
  
  # Standard deviations and other quantities to monitor
  Sigs[1] <- sig # SD among observations
  Sigs[2] <- sig.Lt.peak # SD of peak t parameter (log scale) among pulses
  Sigs[3] <- sig.y.peak # SD of peak y parameter among pulses

  # Dsum
  Dsum <- sum(sqdiff[])
  # Bayesian R2
  # Compute Bayesian R2 value
  var.pred <- pow(sd(mu[]),2)
  var.resid <- 1/tau
  R2 <- var.pred/(var.pred + var.resid)
 
}